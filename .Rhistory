hist(unmet$wtr)
barplot(unmet$wtr)
Q6 <- rnorm(1000)^2
Q6
plot(Q6)
hist(Q6)
summary(Q6)
x <- 0:30 ; plot(x, dbinom(x, 30, 0.5), type = "h")
Try the code x <- 0:2 ; plot(x, dbinom(x, 2, 0.5), type = "h")
x <- 0:2 ; plot(x, dbinom(x, 2, 0.5), type = "h")
x <- 0:2 ; plot(x, dbinom(x, 2, 0.5), type = "h")
x <- 0:2 ; plot(x, dbinom(x, 2, 0.5), type = "h")
x <- 0:2 ; plot(x, dbinom(x, 2, 0.5), type = "h")
x <- 0:2 ; plot(x, dbinom(x, 2, 0.5), type = "h")
x <- 0:2 ;
plot(x, dbinom( ), type = "h", col = "red", lwd=10, main="Probability that X patients are cured")
x <- 0:2 ;
plot(x, dbinom(0.7 ), type = "h", col = "red", lwd=10, main="Probability that X patients are cured")
x <- 0:2 ;
plot(x, dbinom(x, 2, 0.7 ), type = "h", col = "red", lwd=10, main="Probability that X patients are cured")
x <- 0:2
plot(x, dbinom(x, 2, 0.5), type = "h", col = "blue", lwd=4, ylim= c(0,0.6))
curve(dnorm(x, 1, 0.8), add=T)
mean(x)
x <- 0:2
plot(x, dbinom(x, 8, 0.5), type = "h", col = "blue", lwd=4, ylim= c(0,0.6))
curve(dnorm(x, 1, 0.8), add=T)
mean(x)
x <- 0:8
plot(x, dbinom(x, 2, 0.5), type = "h", col = "blue", lwd=4, ylim= c(0,0.6))
curve(dnorm(x, 1, 0.8), add=T)
mean(x)
x <- 0:8
plot(x, dbinom(x, 2, 0.5), type = "h", col = "blue", lwd=4, ylim= c(0,0.6))
curve(dnorm(x, 1, 0.8), add=T)
mean(x)
x <- 0:2
plot(x, dbinom(x, 8, 0.5), type = "h", col = "blue", lwd=4, ylim= c(0,0.6))
curve(dnorm(x, 1, 0.8), add=T)
mean(x)
x <- 0:7
plot(x, dbinom(x, 2, 0.5), type = "h", col = "blue", lwd=4, ylim= c(0,0.6))
curve(dnorm(x, 1, 0.8), add=T)
mean(x)
x <- 0:8
plot(x, dbinom(x, 2, 0.5), type = "h", col = "blue", lwd=4, ylim= c(0,0.6))
curve(dnorm(x, 1, 0.8), add=T)
mean(x)
x <- 0:8
plot(x, dbinom(x, 8, 0.5), type = "h", col = "blue", lwd=4, ylim= c(0,0.6))
curve(dnorm(x, 1, 0.8), add=T)
mean(x)
x <- 0:8
plot(x, dbinom(x, 8, 0.5), type = "h", col = "blue", lwd=4, ylim= c(0,0.6))
curve(dnorm(x, 4, 0.8), add=T)
mean(x)
x <- 0:8
plot(x, dbinom(x, 8, 0.5), type = "h", col = "blue", lwd=4, ylim= c(0,0.6))
curve(dnorm(x, 4, 1.5), add=T)
mean(x)
qnorm(.25,4,1.5)
qnorm(2,4,1.5)
qnorm(-2/1.5,4,1.5)
qnorm(2,4,1.5)
pnorm(.25,4,1.5)
pbinom(.25, size=8, prob=0.5, lower.tail=FALSE)
pbinom(.5, size=8, prob=0.5, lower.tail=FALSE)
pbinom(.5, size=8, prob=0.5)
pbinom(.5, size=8, prob=0.5)*100
pbinom(50, size=8, prob=0.5)*100
pbinom(2, size=8, prob=0.5)*100
pbinom(4, size=8, prob=0.5)*100
pbinom(1, size=8, prob=0.5)*100
pbinom(2, size=8, prob=0.5)*100
x <- 0:7
plot(x, dbinom(x, 8, 0.5), type = "h", col = "blue", lwd=4, ylim= c(0,0.6))
curve(dnorm(x, 4, 1.5), add=T)
mean(x)
pnorm(.25,4,1.5)
pbinom(2, size=8, prob=0.5)*100
x <- 0:8
plot(x, dbinom(x, 8, 0.5), type = "h", col = "blue", lwd=4, ylim= c(0,0.6))
curve(dnorm(x, 4, 1.5), add=T)
mean(x)
pnorm(.25,4,1.5)
pbinom(2, size=8, prob=0.5)*100
round(dbinom(2, 8, 0.5),2)
x <- 0:30
plot(x, dbinom(x, 30, 0.5), type = "h", col = "blue", lwd=4, ylim= c(0,0.6))
curve(dnorm(x, 15, 1.5), add=T)
sd(X)
sd(x)
curve(dnorm(x, 15, 9), add=T)
x <- 0:30
plot(x, dbinom(x, 30, 0.5), type = "h", col = "blue", lwd=4, ylim= c(0,0.6))
mean(x)
sd(x)
curve(dnorm(x, 15, 9), add=T)
curve(dnorm(x, 15, 2.8), add=T)
sd(x)
sd(x)/sqrt(30)
curve(dnorm(x, 15, 5.6), add=T)
curve(dnorm(x, 15, 2.8), add=T)
x <- 0:30
plot(x, dbinom(x, 30, 0.5), type = "h", col = "blue", lwd=4, ylim= c(0,0.6))
curve(dnorm(x, 15, 2.8), add=T)
sd(x)/sqrt(30)
x
sd(dbinom(x, 30, 0.5)
sd(dbinom(x, 30, 0.5))
mean(x)
sd(dbinom(x, 30, 0.5))
dbinom(x, 30, 0.5)
mean(dbinom(x, 30, 0.5))
sqrt(30*0.5*(1-0.5))
sqrt(8*0.5*(1-0.5))
30*0.5*(1-0.5))
30*0.5*(1-0.5)
qnorm(0.25,15)
qnorm(0.25,0,1)
mean(dbinom(x, 30, 0.5))
sd(dbinom(x, 30, 0.5))
table(x, dbinom(x, 30, 0.5))
dbinom(x, 30, 0.5)
dbinom(x, 30, 0.5)*100
dbinom(x, 30, 0.5)
x <- 0:30
plot(x, dbinom(x, 30, 0.5), type = "h", col = "blue", lwd=4, ylim= c(0,0.6))
curve(dnorm(x, 15, 2.8), add=T)
sd(dbinom(x, 30, 0.5))
dbinom(x, 30, 0.5)
dbinom(x, 30, 0.5)*1000000
dbinom(x, 30, 0.5)
set.seed(400)
NORMAL <- rnorm(10000)
UNIFORM <- runif(10000)
SKEWED <- rep(1:140, 1:140)
opar <- par() #Save original par settings. Read ?par() if you like
par(mfrow= c(3,1)) #Ask for three columns and one row in the graph
hist(NORMAL)
hist(UNIFORM)
hist(SKEWED)
par(mfrow= c(3,1)) #Ask for three columns and one row in the graph
sampl <- vector() #Create an empty vector
for(i in 1:1000) #Start a loop with 1000 rounds
sampl <- c(sampl, mean(sample(NORMAL, 3, replace=T)))
#fill sampl with sampl, and the mean of three random items from NORMAL
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 3 " )
sampl <- vector()
for(i in 1:1000)
sampl <- c(sampl, mean(sample(NORMAL, 6, replace=T)))
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 6 " )
sampl <- vector()
for(i in 1:1000)
sampl <- c(sampl, mean(sample(NORMAL, 300, replace=T)))
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 300 " )
?sample
par(mfrow= c(3,1)) #Ask for three columns and one row in the graph
sampl <- vector() #Create an empty vector
for(i in 1:1000) #Start a loop with 1000 rounds
sampl <- c(sampl, mean(sample(UNIFORM, 3, replace=T)))
#fill sampl with sampl, and the mean of three random items from NORMAL
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 3 " )
sampl <- vector()
for(i in 1:1000)
sampl <- c(sampl, mean(sample(UNIFORM, 6, replace=T)))
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 6 " )
sampl <- vector()
for(i in 1:1000)
sampl <- c(sampl, mean(sample(UNIFORM, 300, replace=T)))
mean(sampl)
sd(sampl)
hist(sampl, xlim = c(-2, 2), main = " n = 300 " )
x <- rnorm(100000)
y <- rnorm(100000)
z <- rep(NA, 100000) #z is created empty but with a given size.
system.time({
for (i in 1:100000) {
z[i] <- x[i] + y[i]
}
})
system.time( k <- x + y )
?predict()
set.seed(897)
ME <- matrix(rnorm(24000),nrow=1000)
View(ME)
View(ME)
colnames(ME) <- c(paste("A",1:12,sep=""),paste("B",1:12,sep=""))
View(ME)
View(ME)
length(which(ME>=0))
keep <- (apply(ME[,1:12],1,mean) > 0) & (apply(ME[,13:24],1,mean) > 0)
length(keep)
sum(keep) #make sure you understand sum() applied to logicals
head(keep)
trimmed <- apply(ME,1,function(ME){mean(ME, trim=0.05)})
trimmed
install_from_swirl("Statistical Inference")
library(swirl)
install_from_swirl("Statistical Inference")
swirl
swirl()
10
info()
q
1
2
3
4
5
6
7
8
11/12
deck
1/54
1/52
52
4/52
0
12/52
12/52
13/52
3/52
2/52
1/52
2/51
1.6*0.8/2
.64
mypdf
mypdf(1.6)
integrate(mypdf, 0, 1.6)
.32
sqrt(2)
swirl()
library(swirl)
swirl()
12
exit
quit
quit()
library(swirl)
swirl()
library(swirl)
swirl()
setwd("c:/EMC/Cursos/GitHub/Practice-With-Titanic/")
train <- read.csv("train.csv")
test <- read.csv("test.csv")
test[which(is.na(test$Fare)), ]
MissingFare <- median(train[train$Pclass == 3 & train$Embarked == "S" & train$Age > 50 & train$Sex == "male", "Fare"], na.rm = TRUE)
MissingFare
test[153, "Fare"] <- MissingFare
train[train$Embarked == "", ]
table(train[train$Survived == 1 & train$Pclass == 1, "Embarked"])
train$Embarked[c(62,830)] = "S"
train$Embarked <- factor(train$Embarked)
train[grep("Master.", train$Name, fixed = TRUE), ]
summary(train$Age[grep("Master.", train$Name, fixed = TRUE)])
all_set <- rbind(train[, -2], test)
all_set$Title <- NA
all_set$Title[grep("Master.", all_set$Name, fixed = TRUE)] <- "Master."
all_set$Title[grep("Miss", all_set$Name, fixed = TRUE)] <- "Miss"
all_set$Title[grep("Mr.", all_set$Name, fixed = TRUE)] <- "Mr."
all_set$Title[grep("Mrs.", all_set$Name, fixed = TRUE)] <- "Mrs."
all_set$Title[grep("Rev.", all_set$Name, fixed = TRUE)] <- "Rev."
all_set$Title[grep("Don.", all_set$Name, fixed = TRUE)] <- "Don."
all_set$Title[grep("Dr.", all_set$Name, fixed = TRUE)] <- "Dr."
all_set$Title[grep("Major.", all_set$Name, fixed = TRUE)] <- "Major."
all_set$Title[grep("Jonkheer", all_set$Name, fixed = TRUE)] <- "Jonkheer"
all_set$Title[grep("Col.", all_set$Name, fixed = TRUE)] <- "Col."
all_set$Title[grep("Mme.", all_set$Name, fixed = TRUE)] <- "Mme."
all_set$Title[grep("Ms.", all_set$Name, fixed = TRUE)] <- "Ms."
all_set$Title[grep("Lady.", all_set$Name, fixed = TRUE)] <- "Lady."
all_set$Title[grep("Sir.", all_set$Name, fixed = TRUE)] <- "Sir."
all_set$Title[grep("Mlle.", all_set$Name, fixed = TRUE)] <- "Mlle."
all_set$Title[grep("Capt.", all_set$Name, fixed = TRUE)] <- "Capt."
all_set$Title[grep("the Countess.", all_set$Name, fixed = TRUE)] <- "the Countess"
# Dona is spanish. We need change to Miss.
all_set$Title[grep("Dona.", all_set$Name, fixed = TRUE)] <- "Miss"
# Set a factor for this new variable
all_set$Title <- as.factor(all_set$Title)
# Copying Factors to test dataset
levels(test$Title) <- levels(train$Title)
library(rpart)
age_rpart <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title, data = all_set[!is.na(all_set$Age),], method = "anova")
all_set$Age[is.na(all_set$Age)] <- predict(age_rpart, all_set[is.na(all_set$Age),])
head(train[train$Survived == 1,], 10)
head(train[train$Survived == 0,], 10)
head(train[train$Survived == 0,], 50)
head(train$Ticket[train$Survived == 1], 50)
head(train$Ticket[train$Survived == 0], 50)
head(train$Cabin[train$Survived == 0], 50)
head(train$Cabin[train$Survived == 1], 50)
train$Cabin[train$Survived == 1]
train$Cabin[train$Survived == 0]
train$Name[grep("(", train$Name, fixed = true]
train$Name[grep("(", train$Name, fixed = true)]
train$Name[grep("(", train$Name, fixed = TRUE)]
train[grep("(", train$Name, fixed = TRUE), c("Name","Survived")]
all_set$Alias <- NA
all_set$Alias <- 0
all_set$Alias[grep("(", all_set$Name, fixed = TRUE)] <- 1
all_set$Title <- as.factor(all_set$Title)
levels(test$Title) <- levels(train$Title)
train$Age <- all_set[1:891, "Age"]
train$Title <- all_set[1:891, "Title"]
test <- all_set[892:1309, ]
train$Alias <- all_set[1:891, "Alias"]
TitanicRF <- randomForest(as.factor(Survived) ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Age + Title + Alias,
data = train, nodesize = 25, ntree = 2444, importance = TRUE)
PredictRF <- predict(TitanicRF, newdata = test)
PredTest <- predict(TitanicRF, newdata=test, type="response")
MySubmission <- data.frame(PassengerID = test$PassengerId, Survived = PredTest)
library(randomForest)
TitanicRF <- randomForest(as.factor(Survived) ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Age + Title + Alias,
data = train, nodesize = 25, ntree = 2444, importance = TRUE)
PredictRF <- predict(TitanicRF, newdata = test)
PredTest <- predict(TitanicRF, newdata=test, type="response")
MySubmission <- data.frame(PassengerID = test$PassengerId, Survived = PredTest)
write.csv(MySubmission, "Submission4.csv", row.names=FALSE)
varImpPlot(TitanicRF)
TitanicRF <- randomForest(as.factor(Survived) ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Age + Title + Alias,
data = train, nodesize = 50, ntree = 2444, importance = TRUE)
PredictRF <- predict(TitanicRF, newdata = test)
PredTest <- predict(TitanicRF, newdata=test, type="response")
MySubmission <- data.frame(PassengerID = test$PassengerId, Survived = PredTest)
write.csv(MySubmission, "Submission4.csv", row.names=FALSE)
TitanicRF <- randomForest(as.factor(Survived) ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Age + Title,
data = train, nodesize = 25, ntree = 2444, importance = TRUE)
PredictRF <- predict(TitanicRF, newdata = test)
PredTest <- predict(TitanicRF, newdata=test, type="response")
MySubmission <- data.frame(PassengerID = test$PassengerId, Survived = PredTest)
write.csv(MySubmission, "Submission4.csv", row.names=FALSE)
train[grep("Master.", train$Name, fixed = TRUE), c("Name", "Age")]
listacc <- NULL
for (i in (202:202)) {
set.seed=202
split <- sample.split(train$Survived, SplitRatio = 0.7)
Titanictrain <- subset(train, split == TRUE)
Titanictest <- subset(train, split == FALSE)
TitanicRF <- randomForest(as.factor(Survived) ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Age + Title,
data = train, nodesize = 25, ntree = 2444, importance = TRUE)
PredictRF <- predict(TitanicRF, newdata = Titanictest)
tabla <- table(Titanictest$Survived, PredictRF)
acc <- (tabla[1,1] + tabla[2,2])/nrow(Titanictest)
#cat("set.seed=",i," acc=",acc,"\n")
listacc[i] <- acc
if (i %% 100 == 0) { cat(i)}
}
library(ROCR)
split <- sample.split(train$Survived, SplitRatio = 0.7)
library(caTools)
listacc <- NULL
for (i in (202:202)) {
set.seed=202
split <- sample.split(train$Survived, SplitRatio = 0.7)
Titanictrain <- subset(train, split == TRUE)
Titanictest <- subset(train, split == FALSE)
TitanicRF <- randomForest(as.factor(Survived) ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Age + Title,
data = train, nodesize = 25, ntree = 2444, importance = TRUE)
PredictRF <- predict(TitanicRF, newdata = Titanictest)
tabla <- table(Titanictest$Survived, PredictRF)
acc <- (tabla[1,1] + tabla[2,2])/nrow(Titanictest)
#cat("set.seed=",i," acc=",acc,"\n")
listacc[i] <- acc
if (i %% 100 == 0) { cat(i)}
}
acc
tabla
listacc <- NULL
for (i in (1:300)) {
set.seed=i
split <- sample.split(train$Survived, SplitRatio = 0.7)
Titanictrain <- subset(train, split == TRUE)
Titanictest <- subset(train, split == FALSE)
TitanicRF <- randomForest(as.factor(Survived) ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Age + Title,
data = train, nodesize = 25, ntree = 2444, importance = TRUE)
PredictRF <- predict(TitanicRF, newdata = Titanictest)
tabla <- table(Titanictest$Survived, PredictRF)
acc <- (tabla[1,1] + tabla[2,2])/nrow(Titanictest)
#cat("set.seed=",i," acc=",acc,"\n")
listacc[i] <- acc
if (i %% 100 == 0) { cat(i)}
}
acc
tabla
plot(listacc)
max(listacc)
which.max(listacc)
listacc <- NULL
for (i in (1:100)) {
set.seed=75
split <- sample.split(train$Survived, SplitRatio = 0.7)
Titanictrain <- subset(train, split == TRUE)
Titanictest <- subset(train, split == FALSE)
TitanicRF <- randomForest(as.factor(Survived) ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Age + Title,
data = train, nodesize = i, ntree = 2444, importance = TRUE)
PredictRF <- predict(TitanicRF, newdata = Titanictest)
tabla <- table(Titanictest$Survived, PredictRF)
acc <- (tabla[1,1] + tabla[2,2])/nrow(Titanictest)
cat("nodesize=",i," acc=",acc,"\n")
listacc[i] <- acc
if (i %% 100 == 0) { cat(i)}
}
acc
tabla
plot(listacc)
listacc <- NULL
for (i in (1:1)) {
set.seed=75
split <- sample.split(train$Survived, SplitRatio = 0.7)
Titanictrain <- subset(train, split == TRUE)
Titanictest <- subset(train, split == FALSE)
TitanicRF <- randomForest(as.factor(Survived) ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Age + Title,
data = train, nodesize = 37, ntree = 2444, importance = TRUE)
PredictRF <- predict(TitanicRF, newdata = Titanictest)
tabla <- table(Titanictest$Survived, PredictRF)
acc <- (tabla[1,1] + tabla[2,2])/nrow(Titanictest)
cat("nodesize=",i," acc=",acc,"\n")
listacc[i] <- acc
if (i %% 100 == 0) { cat(i)}
}
acc
tabla
plot(listacc)
max(listacc)
which.max(listacc)
listacc <- NULL
for (i in (1:100)) {
set.seed=1
split <- sample.split(train$Survived, SplitRatio = 0.7)
Titanictrain <- subset(train, split == TRUE)
Titanictest <- subset(train, split == FALSE)
TitanicRF <- randomForest(as.factor(Survived) ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Age + Title,
data = train, nodesize = 37, ntree = 2444, importance = TRUE)
PredictRF <- predict(TitanicRF, newdata = Titanictest)
tabla <- table(Titanictest$Survived, PredictRF)
acc <- (tabla[1,1] + tabla[2,2])/nrow(Titanictest)
cat("nodesize=",i," acc=",acc,"\n")
listacc[i] <- acc
if (i %% 100 == 0) { cat(i)}
}
acc
tabla
plot(listacc)
listacc <- NULL
for (i in (1:100)) {
set.seed=i
split <- sample.split(train$Survived, SplitRatio = 0.7)
Titanictrain <- subset(train, split == TRUE)
Titanictest <- subset(train, split == FALSE)
TitanicRF <- randomForest(as.factor(Survived) ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Age + Title,
data = train, nodesize = 37, ntree = 2444, importance = TRUE)
PredictRF <- predict(TitanicRF, newdata = Titanictest)
tabla <- table(Titanictest$Survived, PredictRF)
acc <- (tabla[1,1] + tabla[2,2])/nrow(Titanictest)
cat("set.seed=",i," acc=",acc,"\n")
listacc[i] <- acc
if (i %% 100 == 0) { cat(i)}
}
acc
tabla
plot(listacc)
listacc <- NULL
for (i in (20:40)) {
set.seed=42
split <- sample.split(train$Survived, SplitRatio = 0.7)
Titanictrain <- subset(train, split == TRUE)
Titanictest <- subset(train, split == FALSE)
TitanicRF <- randomForest(as.factor(Survived) ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Age + Title,
data = train, nodesize = i, ntree = 2444, importance = TRUE)
PredictRF <- predict(TitanicRF, newdata = Titanictest)
tabla <- table(Titanictest$Survived, PredictRF)
acc <- (tabla[1,1] + tabla[2,2])/nrow(Titanictest)
cat("nodesize=",i," acc=",acc,"\n")
listacc[i] <- acc
if (i %% 100 == 0) { cat(i)}
}
acc
tabla
plot(listacc)
listacc <- NULL
for (i in (1)) {
set.seed=42
split <- sample.split(train$Survived, SplitRatio = 0.7)
Titanictrain <- subset(train, split == TRUE)
Titanictest <- subset(train, split == FALSE)
TitanicRF <- randomForest(as.factor(Survived) ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Age + Title,
data = train, nodesize = 30, ntree = 2444, importance = TRUE)
PredictRF <- predict(TitanicRF, newdata = Titanictest)
tabla <- table(Titanictest$Survived, PredictRF)
acc <- (tabla[1,1] + tabla[2,2])/nrow(Titanictest)
cat("nodesize=",i," acc=",acc,"\n")
listacc[i] <- acc
if (i %% 100 == 0) { cat(i)}
}
acc
tabla
plot(listacc)
PredTest <- predict(TitanicRF, newdata=test, type="response")
MySubmission <- data.frame(PassengerID = test$PassengerId, Survived = PredTest)
write.csv(MySubmission, "Submission5.csv", row.names=FALSE)
